{"version":3,"sources":["components/header.js","components/footer.js","data/endpoints/api.js","App.js","data/markdown/app_background.js","index.js"],"names":["Header","className","to","Footer","Date","getFullYear","getData","setPeople","a","url","axios","get","then","res","console","log","data","users","remaining","length","user","username","league","standing","img_src","avatar_revision","_id","catch","e","alert","App","useState","people","useEffect","id","source","map","p","idx","href","src","alt","width","Math","round","rating","Index","path","component","ReactDOM","render","document","getElementById"],"mappings":"mMAeeA,EAZA,kBACb,wBAAQC,UAAU,WAAlB,SACE,8BACE,8BACE,cAAC,IAAD,CAAMC,GAAG,wBAAT,SACE,oBAAID,UAAU,QAAd,uCCEKE,EARA,WACb,OACE,qBAAKF,UAAU,SAAf,SACE,4CAAW,IAAIG,MAAOC,cAAtB,sB,2EC+BC,IAAMC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACfC,EAAM,0BACZC,IACGC,IAAIF,EAAM,+BACVG,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,KAAKA,MACrB,IAFa,EAETC,EAAQJ,EAAIG,KAAKA,KAAKC,MACtBC,EAAYD,EAAME,OAHT,cAIIF,GAJJ,yBAIJG,EAJI,QAKXV,IAAMC,IAAIF,EAAM,SAAWW,EAAKC,UAC/BT,MAAK,SAACC,GACLI,EAAMJ,EAAIG,KAAKA,KAAKI,KAAKE,OAAOC,SAAS,GAAGC,QAAWX,EAAIG,KAAKA,KAAKI,KAAKK,gBAApB,+CAEZL,EAAKM,IAFO,QACpD,gFAGgB,MADlBR,GAEEX,EAAUU,OARhB,2BAAyB,IAJZ,kCAgBdU,OAAM,SAACC,GAAOC,MAAMD,MApBF,2CAAH,sDCxBpB,IAwDeE,EAxDH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDzB,EADC,KAchB,OANA0B,qBAAU,WAEN3B,EAAQC,KAET,IAGD,qBAAKN,UAAU,OAAf,SACE,sBAAKiC,GAAG,UAAR,UACE,cAAC,IAAD,CAAejC,UAAU,aAAakC,OC7B1B,uBD+BZ,qBAAKlC,UAAU,YAAf,SAOE,qBAAKA,UAAU,gCAAf,SAMG+B,EACCA,EAAOI,KAAI,SAACC,EAAGC,GAAJ,OACT,sBAAKrC,UAAU,wBAAf,UAEE,oBAAIA,UAAU,WAAd,SAA0BqC,EAAI,IAC9B,oBAAIrC,UAAU,WAAd,SAA0BoC,EAAEhB,WAC5B,mBAAGkB,KAAI,+BAA0BF,EAAEhB,UAAnC,SACE,qBAAKpB,UAAW,WAAhB,SACE,qBAAKuC,IAAKH,EAAEb,QAASiB,IAAKJ,EAAEhB,SAAUqB,MAAM,cAGhD,oBAAIzC,UAAU,WAAd,2BAAqC0C,KAAKC,MAAsB,IAAhBP,EAAEf,OAAOuB,QAAY,SAT3BP,MAa9C,oDEhDRQ,G,cAAQ,kBACZ,qBAAK7C,UAAU,OAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,8BACE,cAAC,IAAD,CAAO8C,KAAK,IAAIC,UAAWlB,MAE7B,cAAC,EAAD,WAKNmB,IAASC,OAAO,cAAC,EAAD,IAAWC,SAASC,eAAe,W","file":"static/js/main.d592ea88.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => (\r\n  <header className=\"masthead\">\r\n    <div>\r\n      <div>\r\n        <Link to=\"/tetrio-endpoint-app/\">\r\n          <h1 className=\"title\">Tetr.io Rankings</h1>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <footer>Â© {new Date().getFullYear()} - Mugicha101</footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import axios from \"axios\";\r\n\r\n// a function that grabs all avatar characters pics! FEEL FREE TO DELETE THIS FUNCTION\r\nexport const getAllAvatarCharacters = async (setCharacters) => {\r\n  let example_var = \"\";\r\n  // here's an example of what adding a variable to a string looks like\r\n  // in this case it's empty, but imagine inserting different types of strings / numbers to grab different types of data\r\n  // check the documentation of your API to see the formating of the endpoint & which vars it can take!\r\n  const url = `https://last-airbender-api.herokuapp.com/api/v1/characters/${example_var}`;\r\n  return axios\r\n    .get(url)\r\n    .then((res) => {\r\n      setCharacters(res.data);\r\n      // you don't have to return anything! this model would be good if you weren't passing the function as a param\r\n      // this would return an object saying the axios call was successful! (good for a success popup notification)\r\n      return { data: res.data, success: true };\r\n    })\r\n    .catch((e) => {\r\n      // if there is a failure, I return a custom object saying success is false, with the error message\r\n      // you don't have to do this! you could simply console.log(e)\r\n      return { success: false, message: e.message };\r\n    });\r\n};\r\n\r\n/**\r\n * TODO: define your own async function that uses Axios with a .then() & .catch() block\r\n * - it should at minimum take a function parameter\r\n * - inside your then block, try console.log(res.data) to see what is printed when your axios call succeeds\r\n * - from there, decide what part of res.data to pass to your function parameter (in this case, I passed the entire thing!)\r\n * - I also deleted my custom CSS from the index.css file so feel free to have fun & play around with the look of your app!\r\n */\r\nfunction format(string) {\r\n  let words = string.split(\" \");\r\n  return words[words.length-1];\r\n}\r\n\r\nexport const getData = async (setPeople) => {\r\n  const url = \"https://ch.tetr.io/api/\";\r\n  axios\r\n    .get(url + \"users/lists/league?limit=50\")\r\n    .then((res) => { // get top rankings\r\n      console.log(res.data.data);\r\n      let users = res.data.data.users;\r\n      let remaining = users.length;\r\n      for (let user of users) {\r\n        axios.get(url + \"users/\" + user.username)\r\n        .then((res) => {\r\n          users[res.data.data.user.league.standing-1].img_src = !res.data.data.user.avatar_revision?\r\n            \"https://pbs.twimg.com/profile_images/1286993509573169153/pN9ULwc6_400x400.jpg\" :\r\n            `https://tetr.io/user-content/avatars/${user._id}.jpg`;\r\n          remaining--;\r\n          if (remaining === 0)\r\n            setPeople(users);\r\n        })\r\n      }\r\n    })\r\n    .catch((e) => {alert(e)});\r\n}","import { useState, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { app_background } from \"./data/markdown\";\r\nimport axios from \"axios\";\r\n\r\n// import your custom data fetching function\r\n// TODO: add a data fetching function to the api.js file in the endpoints folder\r\nimport { getData } from \"./data/endpoints\";\r\nfunction format(string) {\r\n  let words = string.split(\" \");\r\n  return words[words.length-1];\r\n}\r\nconst App = () => {\r\n  const [people, setPeople] = useState([]);\r\n\r\n  /**\r\n   * TODO: modify this useEffect to pass as many params as you want\r\n   * - at minimum, pass your state setting function from above\r\n   * - you could also create more state variables to handle multiple params for your endpoint / user input\r\n   */\r\n  useEffect(() => {\r\n      // if our characters is null, fetch some data!\r\n      getData(setPeople);\r\n    // don't forget to add every state variable you're monitoring to this array!\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div id=\"content\">\r\n        <ReactMarkdown className=\"background\" source={app_background} />\r\n\r\n        <div className=\"container\">\r\n          {/**\r\n           * Code explanation:\r\n           * Feel free to delete this or modify this. It is creating a grid using Boostrap classes\r\n           * - map has a 2nd parameter that tells you the elements index in the array, its good practice to pass this as the key prop\r\n           * - remember to print to console the data you fetch, it will definitely have different properties & values than my data!\r\n           */}\r\n          <div className=\"row justify-content-md-center\">\r\n            {/**\r\n             * - TODO: use a ternary to add conditional react elements\r\n             * - in this case, if characters is null, it displays \"No characters\"\r\n             * - otherwise, it maps through characters and renders info for each person!\r\n             */}\r\n            {people? (\r\n              people.map((p, idx) => (\r\n                <div className=\"col-2 character frame\" key={idx}>\r\n                  {/* Displays name of each character */}\r\n                  <h2 className=\"username\">{idx+1}</h2>\r\n                  <h2 className=\"username\">{p.username}</h2>\r\n                  <a href={`https://ch.tetr.io/u/${p.username}`}>\r\n                    <div className={\"rarity-4\"}>\r\n                      <img src={p.img_src} alt={p.username} width=\"200px\"></img>\r\n                    </div>\r\n                  </a>\r\n                  <h2 className=\"username\">{`Rating: ${Math.round(p.league.rating*100)/100}`}</h2>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div>No Data</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const app_background = `##### CS+SG Week 3`;\r\n\r\nexport default app_background;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport { Header, Footer } from \"./components\";\r\nimport App from \"./App\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\n\r\n\r\nconst Index = () => (\r\n  <div className=\"main\">\r\n    <BrowserRouter>\r\n      <Header />\r\n      <div>\r\n        <Route path=\"/\" component={App} />\r\n      </div>\r\n      <Footer />\r\n    </BrowserRouter>\r\n  </div>\r\n);\r\n\r\nReactDOM.render(<Index />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}